/***************************
- atd-theme.scsss contains variables that are being overwritten to be used in "clr/ui/src/utils/components.clarity"
- This file contains the ATD Theme overwrites that were not able to be put in atd-theme.scss and need to go after "clr/ui/src/utils/components.clarity"

Reasons for styles here include but not limited to:
- Components don't contain the style or it is not in variable form so it can't be overwritten by the atd-theme.scss file.
- No way to change styles in the components.clarity from atd-theme.scss without deviating from the logic of the styles.
---- Example: In "_maps.clarity", h1,h2,h3,h4 calls for font-weight: $clr-typography-lightfont, but in the new atd-theme, it is calling for $clr-typography-regfont. We can't change $clr-typography-lightfont variable to now be regFont.
- It's way more complicated following the layers upon layers Clarity has for some of their sass variables then just right one override. Some variables can go 4+ layers deep. 
---- Example: Just want to change background color on a radio button but to find the orgin of the background color, this is the connect dots of variables you have to follow: $clr-forms-radio-selected-shadow takes from $clr-forms-checkbox-checked-shadow which contains $clr-forms-checkbox-background-color which is set to $clr-action-blue and that lives in colors and is set to #0079b8.
- Clarity itself does overrides themselves so this isn't "counter" clarity
*//////

// - Global
// - Alerts
// - Badge
// - Button
// - Card
// - Datagrid
// - Dropdown
// - Form, Input, Checkbox, Radio, Toggle
// - Header
// - Label
// - Login
// - Modal
// - Nav
// - Table
// - Progress Bars
// - Signpost
// - Spinner
// - Stack View
// - Table
// - Tabs
// - Tooltip
// - Tree View
// - Typography
// - Vertical Nav
// - Wizard


// All styles must be within a body tag. That's how Clarity has the hierarchy set up so to overwrite, these styles need it too. 
body {



/**********
 * Typography
 * Clarity uses the geometric sans-serif font, Metropolis.
 *
 * Usage:
 * - ../typography/_typography.clarity.scss
 * - ../data/datagrid/_datagrid.clarity.scss
 */

h1, h2, h3, h4, h5 {
  font-weight: $clr-typography-regfont;
}
h6 {
  font-family: $clr-font;
  font-weight: $clr-typography-boldfont;
}

.p2, .p3, .p4, label {
  font-family: $roboto-condensed;
}

.p2 {
  font-weight: $clr-typography-boldfont;
}

// Clarity also has the .p classes by themsleves and also binded wit a p tag 

p {
  &.p2, &.p3, &.p4 {
    font-family: $roboto-condensed;
  }

  &.p2 {
    font-weight: $clr-typography-boldfont;
  }
}


/*****************
 * Badge
 * Badges provide a method to highlight a count of an element either next to it or inside the element itself.
 * Here you can set the background-color and font color(s) for the various badge types.
 * There are five color options and four status types a Clarity label may have.
 *
 * Usage: ./_maps.clarity.scss
 */



 

/*****************
 * Buttons
 * Buttons allow an application to communicate action and direct user intent.
 * Buttons can be: solid, outlined or flat.
 * Solid and outline have four types: primary, success, warning, danger.
 * Buttons can be disabled.
 *
 * For each button type, use these variables to change the following button properties:
 * - background color
 * - border
 * - (font) color
 * - :hover background-color
 * - :hover (font) color
 * - box-shadow color
 *
 *  NOTE: these variables also affect button groups.
 *
 * Usage: ./_maps.clarity.scss
 */

 .btn {
   border-radius: 18px;

   &.btn-sm {
    border-radius: 12px;
   }
 }


/**********
 * Card
 * A card presents high-level information and can guide the user toward related actions and details. Use these variables
 * to change the look and feel of your cards.
 *
 * Usage: ../layout/_card.clarity.scss
 */

// END: Card


/**********
 * Checkboxes
 * 
 *
 * Usage:
 */

 .clr-checkbox-wrapper label {
   color: $ATD-gray-1;
 }
 
// END: Card


/*********
 * Dropdown
 * A dropdown menu allows the user to choose an option or action from a contextual list. Use these variables to change
 * the look-n-feel of your dropdowns.
 *
 * Usage: ../popover/dropdown/_dropdown.clarity.scss
 */

.dropdown-menu {
  .dropdown-divider {
    margin: 0.4rem 0;
  }
  .dropdown-header {
    padding: .25rem 0.5rem .25rem;
  }
}

// END: Dropdown overrides





/******
 * Forms: TODO: track down component usages and names
 * A form is a structured layout of related input components.
 * There are a variety of variables used to change form elements, including:
 *
 * Usage:
 * ../forms/styles/_checkbox.clarity.scss
 * ../forms/styles/_containers.clarity.scss
 * ../forms/styles/_file.clarity.scss
 * ../forms/styles/_form.clarity.scss
 * ../forms/styles/_input.clarity.scss
 * ../forms/styles/_input-group.clarity.scss
 * ../forms/styles/_mixings.forms.scss
 * ../forms/styles/radio.clarity.scss
 * ../forms/styles/_select.clarity.scss
 * ../forms/styles/_textarea.clarity.scss
 * ../forms/styles/_variables.clarity.scss
 *
 */

// GENERIC
.clr-input {
  font-family: $roboto-condensed;
}
// Select

// Checkbox

// Radio
.clr-radio-wrapper input[type='radio']+label::before {
  border-color: $ATD-gray-2;
}

.clr-form-control-disabled {
  .clr-radio-wrapper input[type='radio']+label::before {
    border: $ATD-gray-4;
    background: $ATD-gray-4;
    box-shadow: inset 0 0 0 0.25rem $ATD-gray-4;
  }
  .clr-radio-wrapper input[type='radio']:checked+label::before {
    background: $ATD-gray-1;
  }
}

// END: Forms overrides


/*****************
 * Label
 * Labels show concise metadata in a compact format. Here you can set the background-color and font color(s) for the
 * different types of labels.
 *
 * There are five color options and four status types a Clarity label may have.

 * Usage: ./_maps.clarity.scss$ATD-orange
 */

 .label, a.label {
       padding: 0 .5rem 0px;
 }

label>.badge, a.label>.badge {
    margin: 0 -0.39rem 0 0.25rem;
}

// END: Labels


// End body {}
}
// End body {}